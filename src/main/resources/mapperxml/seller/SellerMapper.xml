<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.mapper_interface.seller.SellerMapper">
    <!--    남원우-->


    <!--    최경락-->


    <!--    이무현-->


    <!--    유지호-->
    <select id="mySellerInfoByIdx" parameterType="Integer" resultType="SellerDTO">
        select * from seller where seller_idx = #{sellerIdx}
    </select>

    <select id="getMyTotalRev" parameterType="Integer" resultType="int">
        SELECT SUM(A.order_total_price)
        FROM order_product A
        LEFT JOIN order_detail B ON A.order_idx = B.order_idx
        LEFT JOIN product C ON B.product_idx = C.product_idx
        WHERE C.seller_idx = #{sellerIdx}
        GROUP BY C.seller_idx
    </select>

    <select id="getDateRev" parameterType="map" resultType="int">
        SELECT SUM(A.order_total_price) as totalRevenue
        FROM order_product A
        LEFT JOIN order_detail B ON A.order_idx = B.order_idx
        LEFT JOIN product C ON B.product_idx = C.product_idx
        WHERE C.seller_idx = #{sellerIdx}
        AND DATE_FORMAT(A.order_date, '%Y-%m') = #{thisMonth}
        GROUP BY C.seller_idx
    </select>

<!--    <select id="getDateRevLast" parameterType="map" resultType="int">
        SELECT SUM(A.order_total_price) as totalRevenue
        FROM order_product A
        LEFT JOIN order_detail B ON A.order_idx = B.order_idx
        LEFT JOIN product C ON B.product_idx = C.product_idx
        WHERE C.seller_idx = #{sellerIdx}
        AND DATE_FORMAT(A.order_date, '%Y-%m') = #{lastMonth}
        GROUP BY C.seller_idx
    </select>-->

    <select id="avgRev" parameterType="Integer" resultType="int">
        <![CDATA[
        select sum(A.order_total_price)/count(distinct A.order_date)
        from (select order_idx, customer_idx, date_format(order_date, '%Y-%m') order_date, order_total_price from order_product) A
        left join (select order_idx, product_idx from order_detail) B on A.order_idx = B.order_idx
        left join (select product_idx, seller_idx from product) C on B.product_idx = C.product_idx
        where c.seller_idx = #{sellerIdx} and A.order_date < date_format(now(), '%Y-%m')
         ]]>
    </select>


    <!--    변재혁-->
    <insert id="sellerRegister" parameterType="kr.co.chunjaeshop.security.RegisterFormDTO">
        INSERT
        INTO seller(seller_id, seller_name, seller_email, seller_phone, seller_password,
                    seller_zipcode, seller_address1, seller_address2)
        VALUES(#{id}, #{name}, #{email}, #{phone}, #{password1},
               #{zipcode}, #{address1}, #{address2})
    </insert>

    <select id="idDuplicationCheck" resultType="int">
        SELECT COUNT(seller_id)
        FROM seller
        WHERE seller_id = #{id}
    </select>

    <select id="loginSeller" resultType="kr.co.chunjaeshop.security.LoginUserDTO$UserVO">
        SELECT seller_idx AS idx, seller_id AS id, seller_name AS name, seller_email AS email,
            seller_phone AS phone, seller_password AS password, seller_joined AS joined, seller_zipcode AS zipcode,
            seller_address1 AS address1, seller_address2 AS address2, seller_authority AS authority
        FROM seller
        WHERE seller_id = #{username}
    </select>
</mapper>